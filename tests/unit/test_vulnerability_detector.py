"""
Unit tests for the vulnerability detector module.
"""

import pytest
import json
from datetime import datetime
from unittest.mock import Mock, patch, MagicMock

from nmap_ai.ai.vulnerability_detector import VulnerabilityDetector, Vulnerability, VulnerabilityReport
from nmap_ai.config import Config


class TestVulnerabilityDetector:
    """Test cases for VulnerabilityDetector class."""
    
    @pytest.fixture
    def detector(self, test_config, temp_data_dir):
        """Create a VulnerabilityDetector instance for testing."""
        return VulnerabilityDetector(test_config)
    
    def test_initialization(self, detector):
        """Test VulnerabilityDetector initialization."""
        assert detector is not None
        assert detector.config is not None
        assert hasattr(detector, 'vulnerable_patterns')
        assert hasattr(detector, 'severity_weights')
    
    def test_analyze_scan_results(self, detector, sample_scan_results):
        """Test vulnerability analysis of scan results."""
        report = detector.analyze_scan_results(sample_scan_results)
        
        assert isinstance(report, VulnerabilityReport)
        assert report.target_ip == '192.168.1.1'
        assert isinstance(report.scan_time, datetime)
        assert report.total_vulnerabilities >= 0
        assert isinstance(report.vulnerabilities, list)
        assert isinstance(report.recommendations, list)
    
    def test_check_service_vulnerabilities(self, detector):
        """Test service vulnerability detection."""
        vulnerabilities = detector._check_service_vulnerabilities(
            'ssh', 'OpenSSH', '7.4', 22
        )
        
        assert isinstance(vulnerabilities, list)
        # Should find vulnerabilities for OpenSSH 7.4
        if vulnerabilities:
            vuln = vulnerabilities[0]
            assert isinstance(vuln, Vulnerability)
            assert vuln.port == 22
            assert vuln.affected_service == 'ssh'
    
    def test_check_default_credentials(self, detector):
        """Test default credentials checking."""
        vulnerabilities = detector._check_default_credentials('ftp', 21)
        
        assert isinstance(vulnerabilities, list)
        if vulnerabilities:
            vuln = vulnerabilities[0]
            assert isinstance(vuln, Vulnerability)
            assert vuln.port == 21
            assert 'default credentials' in vuln.description.lower()
    
    def test_check_insecure_configurations(self, detector):
        """Test insecure configuration detection."""
        port_data = {'state': 'open', 'name': 'ftp'}
        vulnerabilities = detector._check_insecure_configurations(
            'ftp', port_data, 21
        )
        
        assert isinstance(vulnerabilities, list)
        # FTP should be flagged as insecure
        assert len(vulnerabilities) >= 1
        vuln = vulnerabilities[0]
        assert isinstance(vuln, Vulnerability)
        assert 'plaintext' in vuln.description.lower()
    
    def test_generate_report(self, detector):
        """Test vulnerability report generation."""
        vulnerabilities = [
            Vulnerability(
                cve_id='CVE-2018-15473',
                severity='high',
                score=7.5,
                description='Test vulnerability',
                affected_service='ssh',
                port=22,
                references=['https://example.com'],
                exploit_available=True,
                patch_available=True,
                discovery_method='test'
            )
        ]
        
        report = detector._generate_report('192.168.1.1', vulnerabilities)
        
        assert isinstance(report, VulnerabilityReport)
        assert report.total_vulnerabilities == 1
        assert report.high_count == 1
        assert report.risk_score > 0
        assert len(report.recommendations) > 0
    
    def test_export_json(self, detector):
        """Test JSON export functionality."""
        vulnerabilities = [
            Vulnerability(
                cve_id='CVE-2018-15473',
                severity='medium',
                score=5.0,
                description='Test vulnerability',
                affected_service='ssh',
                port=22,
                references=['https://example.com'],
                exploit_available=False,
                patch_available=True,
                discovery_method='test'
            )
        ]
        
        report = VulnerabilityReport(
            target_ip='192.168.1.1',
            scan_time=datetime.now(),
            total_vulnerabilities=1,
            critical_count=0,
            high_count=0,
            medium_count=1,
            low_count=0,
            vulnerabilities=vulnerabilities,
            risk_score=5.0,
            recommendations=['Test recommendation']
        )
        
        json_output = detector.export_report(report, 'json')
        
        assert isinstance(json_output, str)
        # Should be valid JSON
        parsed = json.loads(json_output)
        assert parsed['target_ip'] == '192.168.1.1'
        assert parsed['summary']['total_vulnerabilities'] == 1
        assert len(parsed['vulnerabilities']) == 1
    
    def test_export_html(self, detector):
        """Test HTML export functionality."""
        vulnerabilities = [
            Vulnerability(
                cve_id='CVE-2018-15473',
                severity='critical',
                score=9.0,
                description='Critical test vulnerability',
                affected_service='ssh',
                port=22,
                references=['https://example.com'],
                exploit_available=True,
                patch_available=False,
                discovery_method='test'
            )
        ]
        
        report = VulnerabilityReport(
            target_ip='192.168.1.1',
            scan_time=datetime.now(),
            total_vulnerabilities=1,
            critical_count=1,
            high_count=0,
            medium_count=0,
            low_count=0,
            vulnerabilities=vulnerabilities,
            risk_score=9.0,
            recommendations=['Critical recommendation']
        )
        
        html_output = detector.export_report(report, 'html')
        
        assert isinstance(html_output, str)
        assert '<html>' in html_output
        assert '192.168.1.1' in html_output
        assert 'CVE-2018-15473' in html_output
    
    def test_export_csv(self, detector):
        """Test CSV export functionality."""
        vulnerabilities = [
            Vulnerability(
                cve_id='CVE-2018-15473',
                severity='low',
                score=2.0,
                description='Low severity test',
                affected_service='http',
                port=80,
                references=['https://example.com'],
                exploit_available=False,
                patch_available=True,
                discovery_method='test'
            )
        ]
        
        report = VulnerabilityReport(
            target_ip='192.168.1.1',
            scan_time=datetime.now(),
            total_vulnerabilities=1,
            critical_count=0,
            high_count=0,
            medium_count=0,
            low_count=1,
            vulnerabilities=vulnerabilities,
            risk_score=2.0,
            recommendations=['Low priority recommendation']
        )
        
        csv_output = detector.export_report(report, 'csv')
        
        assert isinstance(csv_output, str)
        assert 'CVE ID' in csv_output  # Header
        assert 'CVE-2018-15473' in csv_output
        assert 'low' in csv_output
    
    def test_unsupported_export_format(self, detector):
        """Test error handling for unsupported export formats."""
        report = VulnerabilityReport(
            target_ip='192.168.1.1',
            scan_time=datetime.now(),
            total_vulnerabilities=0,
            critical_count=0,
            high_count=0,
            medium_count=0,
            low_count=0,
            vulnerabilities=[],
            risk_score=0.0,
            recommendations=[]
        )
        
        with pytest.raises(ValueError, match="Unsupported format"):
            detector.export_report(report, 'xml')
    
    @patch('sqlite3.connect')
    def test_database_initialization(self, mock_connect, detector):
        """Test vulnerability database initialization."""
        mock_conn = MagicMock()
        mock_connect.return_value.__enter__.return_value = mock_conn
        
        detector._init_vulnerability_database()
        
        # Verify database tables are created
        assert mock_conn.execute.call_count >= 2
        execute_calls = [call[0][0] for call in mock_conn.execute.call_args_list]
        
        # Check that vulnerability tables are created
        assert any('CREATE TABLE IF NOT EXISTS vulnerabilities' in call for call in execute_calls)
        assert any('CREATE TABLE IF NOT EXISTS service_vulnerabilities' in call for call in execute_calls)
    
    def test_analyze_host(self, detector, sample_scan_results):
        """Test individual host analysis."""
        host_data = sample_scan_results['scan']['192.168.1.1']
        vulnerabilities = detector._analyze_host('192.168.1.1', host_data)
        
        assert isinstance(vulnerabilities, list)
        # Should find vulnerabilities in the sample data
        assert len(vulnerabilities) >= 0
    
    def test_analyze_port(self, detector):
        """Test individual port analysis."""
        port_data = {
            'state': 'open',
            'name': 'ftp',
            'product': 'vsftpd',
            'version': '2.3.4'
        }
        
        vulnerabilities = detector._analyze_port('192.168.1.1', 21, port_data, 'tcp')
        
        assert isinstance(vulnerabilities, list)
        # vsftpd 2.3.4 should be flagged as vulnerable
        if vulnerabilities:
            assert any('ftp' in vuln.affected_service.lower() for vuln in vulnerabilities)
    
    def test_generate_recommendations(self, detector):
        """Test recommendation generation."""
        vulnerabilities = [
            Vulnerability(
                cve_id='CVE-2018-15473',
                severity='critical',
                score=10.0,
                description='Critical SSH vulnerability',
                affected_service='ssh',
                port=22,
                references=['https://example.com'],
                exploit_available=True,
                patch_available=True,
                discovery_method='default_credentials_check'
            )
        ]
        
        severity_counts = {'critical': 1, 'high': 0, 'medium': 0, 'low': 0}
        recommendations = detector._generate_recommendations(vulnerabilities, severity_counts)
        
        assert isinstance(recommendations, list)
        assert len(recommendations) > 0
        
        # Should include critical vulnerability warning
        critical_rec = [r for r in recommendations if 'CRITICAL' in r]
        assert len(critical_rec) > 0
        
        # Should include default credentials recommendation
        cred_rec = [r for r in recommendations if 'default credentials' in r.lower()]
        assert len(cred_rec) > 0
